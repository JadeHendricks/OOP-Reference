{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Courier New;}}
{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
\pard\b\f0\fs28\lang7177 Object Literals\par
===================================================\par
\par
\b0\fs24 varible name curlyBraces (also now as object literal syntax)\par
\b const circle = \{\};\par
\par
\b0 - Object literals is a simple ways to define objects\par
- Using this is only a issue when you want to duplicated it and it has behaviour(one method or more)\par
\par
\par
\b\fs28 Factory Function\par
===================================================\par
\par
\b0\fs24 - Lets say we want to create another cirlce object (literals file), we would have to duplicate all that code over again right??\par
\par
- \b No \b0 this could be a problem! if we have one or more methods inside our object, so if there is a bug in one of those methods, you'd have to come back and fix it in multiple places.\par
\par
- If a object has one or more methods, we say that, that object has behaviour\par
\par
- Now imagine that object had 10 methods.\par
\par
\b SO WHAT'S THE SOLUTION?\par
\par
-\b0  The solution is to use a factory or a constructor function\par
- The factory function takes in parameters and returns an obeject\par
\par
\par
\b\fs28 Constructor Function\par
===================================================\par
\b0\fs24\par
- The naming convention that we use with a contructor function is slightly different, the first letter should always b uppercase(\i comes from a CLASS convetions in other languages\i0 )\par
\par
- The constructor function takes in parameters and then we use \b THIS \b0 to set properties on the new object created when we use the new keyword\par
\par
- When we use the new operator, a few things happen under the hood.\line\line - A new empty is created \{\}\par
- It will set \b THIS \b0 to point to that object\par
- Then it will return that object automatically from the constructor function\par
\par
\par
\b\fs28 In short\par
===================================================\par
\par
\b0\fs24 - if you return an object from a function it is known as a factory function\par
- If you use the this keyword along with new, it is a constructor function\par
\b\par
but what is the difference which approach should you use?\par
\par
\b0 - Well it depends on who you ask. \par
\par
- Some will say Constructor functions because it looks closer to other languages\par
\par
- While others will say factory functions and one of the arguements is...what if the developer forgets to use the new operator. Then you'll be defining the property methods on the global object.\par
\par
\b\fs28 SO JUST USE WHATEVER YOU WANT!\par
\fs24\par
\fs28\par
===================================================\par
===================================================\par
===================================================\par
===================================================\par
===================================================\par
\par
\par
Constructor Property\par
===================================================\par
\par
\b0\fs24 - Every object in Javascript has a property called constructor and that references the function that was use to construct or create that object\par
\par
**(constructor file)**\par
another.constructor will return the function it was created from\par
\par
**(factory file)**\par
circle.constructor will return a function and as you can see the first letter of this function is uppercase\par
\par
\b EXAMPLE\b0 : f \b O\b0 bject() \{\}\par
\par
- So this is a built in function constructor\par
- When we create an Object using the Object literal syntax. Internally the javascript engine uses this constructor function.\par
\par
\b EXAMPLE\b0 :\par
\par
- let x = \{\};\par
- Javscript will translate that into something like this\par
- let x = new Object();\par
\par
**(factory file)**\par
- So the circle object we create it and return it from our factory function and because we used the object literal syntax internally it was created using this Object constructor function\par
\par
- In Javascript we have a few other built in constructors\line\par
\b EXAMPLE\b0 :\par
\par
- new String(); '',"", ``\par
- new Boolean(); true, false\par
- new Number(); 1, 2, 3\par
\par
- but most of the time we use the literals, beacuse its simplier and cleaner\par
\par
\par
\b\fs28 In short\par
===================================================\par
\b0\fs24\par
- Every object has a constructor property\par
- And that references the function that was used to create that object\par
\b\fs28\par
\par
===================================================\par
===================================================\par
===================================================\par
===================================================\par
===================================================\par
\par
\par
Functions are Objects\par
===================================================\par
\par
\b0\fs24 - One of the confusing concepts in Javascript is that here functions are objects\b\fs28\par
\par
\b0\fs24 - When we declare a function using this syntax \par
\b function name = () \{\}\par
\par
- \b0 The javascript engine will use the function constructor to create the object.\b\fs28\par
\b0\fs24\par
\b EXAMPLE\b0 :\par
\par
- Whats happening under the hood, when declaring the constructor function\par
\par
const Circle1 = new Function('radius', `\par
this.radius = radius;\par
this.draw = function() \{ console.log('draw');\par
\}`);\par
\par
const circle = new Circle1(1);\par
circle = Circle1\b\fs22 .call(\{\}, 1);\par
\b0\fs24\par
console.log(circle.radius);\par
\par
\par
\b\fs28 ===================================================\par
===================================================\par
===================================================\par
===================================================\par
===================================================\par
\par
\par
Value vs Reference Types\par
===================================================\par
\par
\b0\fs24 ValueTypes: Number, String, Boolean, Symbol, Undefined, Null\b\fs28\par
\b0\fs24 ReferenceTypes: Objecst, Functions, Arrays\par
\par
- So what we've learned is that functions are objects and so are arrays. So in a nutshell. In javascript we have \b primitives and objects\b0 .\b\fs28\par
\fs24\par
How does primitives and objets behave differently?\par
\par
lets define two primitives\b0\par
- let x = 10;\par
- let y = x;\par
- x = 20;\par
\par
console.log(x); - 20\par
console.log(y); - 10\b\par
\b0\par
- What I want you to note here is that x and y are two independant varaibles.\par
\par
- So when we work with primitives, the value is stored inside of the variable, when we copy that variable to another variable. That value that is stored in that variable is copied into the new variable. So they are completely independant of each other.\par
\par
- So when we change X at the end here, only X will change as Y has nothing to do with X anymore, it has already stored the value it needs.\par
\par
\par
\b Now with reference types\b0\par
- let x = \{value: 10\};\par
- let y = x;\par
- x.value = 20;\par
\par
console.log(x); - \{value: 20\}\par
console.log(y); - \{value: 20\}\b\par
\b0\par
- So this is the take away\par
\par
- When we use a reference type. That value is not stored inside of the variable, that value is stored somewhere else in memory and the address of that memory location is stored inside the variable.\par
\par
- So when we copy, x into y, it's pointing to the location and getting the value, the same as what x is doing. So the value will always remain the same when shared.\par
\par
\par
\b Conclusion\par
- \b0 Primitives are copied by their value\par
- Objects are copied by their reference\par
\par
\par
\b\fs28 ===================================================\par
===================================================\par
===================================================\par
===================================================\par
===================================================\par
\b0\fs24\par
\b\par
\fs28 Add and Removing Properties\par
===================================================\par
\par
\b0\fs24 function Circle(radius) \{\par
  this.radius = radius;\par
  this.draw = function() \{\par
    console.log('draw');\par
  \}\par
\}\par
\par
const circle = new Circle(10);\par
\par
- these objects in Javascript are dynamic, that means that you can add extra properties in them or delete un-wanted properties\par
\par
- You might be wondering, "\b Why is this useful?\b0 "\par
\par
- Imagine you are working with a User object, the client is going to send a user object to the server. On the server when get this object and then we add addition stuff to it.\par
\par
- And because we don't have classes, we don't need to define these properties ahead of time. We can add them on the fly when ever we need them. And this makes Javascript extremely powerful.\par
\par
- This can be done with \b DOT NOTATION \b0 or \b BRACKET NOTATION \b0 this does the exactly the same thing.\par
\par
- \b HOWEVER\b0 , there are some cases where you would want to use the bracket notation.\par
\par
- When you want to Dynamically access a property name. When you don't know what for example the id you need onload because it gets calculate on run time. We can access it like this.\par
\par
const idForUser = id;\par
userId[idForUser];\par
\par
- Another case is when you are using property names that are not valid identifiers\par
\par
const propertyName = 'center-location'\par
\par
property.center-location - \b will not work\b0\par
propert['center-location'] - \b this will work\b0\par
\par
\par
- We can also delete, incase we don't want certain information to be kept inside of the object\par
\par
\b EXAMPLE:\b0\par
\par
delete object.value\par
delete object['value']\par
\b\par
\par
\fs28 ===================================================\par
===================================================\par
===================================================\par
===================================================\par
===================================================\par
\par
\par
Enumeration Properties\par
===================================================\par
\par
\b0\fs24 - Sometimes you need to iterate over or enumerate the properties of a object. We can do that by using the For in loop\par
\par
\b EXAMPLE:\par
\par
\b0 for (let key in circle) \{\par
  console.log(key);\par
\}\par
\b\fs28\par
\b0\fs24 - the key property here will console.log all the properties and methods keys inside of the object.\par
\par
- now if you want to access the values of these properties we can use the bracket notation\par
\par
\b EXAMPLE:\par
\par
\b0 for (let key in circle) \{\par
  console.log(circle, \b circle[key]\b0 );\par
\}\par
\b\fs28\par
\b0\fs24 - So in this example we get back the keys and the values\par
\par
- There is another way of getting all the keys in a object and that way is to use. However with this approach we cannot seperate properties from methods \par
**Enumeration Properties file** \par
\par
const keys = \b Object.keys\b0 ('object-name'). \par
\par
- This will return all the keys back to you as an array.\par
\par
\par
- Sometimes you want to know if an object has a certain property or method and you can do this by using the \b IN \b0 operator\par
**Enumeration Properties file** \par
\b\fs28\par
\fs24\par
\fs28 ===================================================\par
===================================================\par
===================================================\par
===================================================\par
===================================================\par
\par
\fs24\par
\fs28 Getters and Setters\par
===================================================\par
\par
\b0\fs24 - When we have private properties, we cannot access this on the outside. But if we want to display this inforamtion somewhere inside the application.\par
\par
- We don't want to modify it. We just want to show it.\par
\par
- One solution is to use. \par
this.getDefaultLocation = function \{return defaultLocation\}\par
**Getter and Setters file** \par
\par
- So we create a property on the object that gets the variable and returns it via closures. And with that we can called Object.getDefaultLocation();\par
\par
- This works, however there is a cleaner way to do this.\par
\par
- The way we do that is use Object.defineProperty()\par
\par
- Now the arguments for this method is\line #1 - is the Object that we want to add a new property to (this or object name is fine)\par
#2 - the name of the property you want to add\line #3 - Object, in this object we add a key value pair called get and the value is a function\par
\par
- And that function will return defaultLocation as a read only file in our case.\par
\par
- We can also now call it using .dot/bracket notation\par
**Getter and Setters file** \par
\par
\par
\b Want to set a value on the outside?\par
\par
- \b0 Lets define a setter\par
\par
- So in this object - defineProperty. We add another key value pair after get called set and the value of that is a function.\par
\par
- That function takes a arguement called value and then we can set this defaultLocation variable to value.\par
**Getter and Setters file** \par
\par
- And because the setter is a function, we can do whatever we want with the data before we set it. For example like validation that the information is correct and not falsy\par
\b\fs28\par
\fs24\par
\fs22\par
}
 