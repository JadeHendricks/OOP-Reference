{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Courier New;}}
{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\b\f0\fs28\lang9 ES6 CLASSES\line ====================================================\par
\b0\fs24 - In ES6 there is a new way to create Objects and inplement inheritence and that's by using classes.\par
- But these classes are not like languages like C# or Java, it's syntactic sugar over Prototypical inheritance\par
- In classes we crate it like this \b class Name \{\}\par
\b0 - We then use a special method given to us called the \b constructor method\b0 . When using the constructor method we can add in all our properties we want on it.\line\line - If we want to add methods to the class, we do that outside of the constructor and without \b THIS\b0 . All methods that we add to a class outside of the constructor method will be added to the prototype.\par
- If you don't want a method to be on the prototype, then you need to define it in the constructor\par
- Classes in ES6 will give an error if you do not use the new keyword when creating an instance of the class Object\par
\par
\b\fs28 ====================================================\line ========================================================================================================\par
\par
Hoisting\line ====================================================\par
\b0\fs24 - In Javascript there are two ways to declare functions,\par
#1 - Function declaration syntax - function sayHello()\{\}\line #2 - Function expression syntax  - \line const hello = function()\{\};\par
- When using an Expression you nede to close it with a semi colon\par
- Semi colon aside, there is a critical difference between a function expression and a function declaration in Javascript.\par
- Function Declaration are hoisted, which means raised to the top of the code, so we can call it before we create the function.\par
- Function expressions are not hoisted\par
- Variables are hoisted, but they are first set to undefined. So we cannot use them either.\par
\b What about classes?\fs28\par
\b0\fs24 - Unlike functions, class declarations or class expressions are not hoisted\b\fs28\par
\b0\fs24\par
\b\fs28 ====================================================\line ========================================================================================================\par
\par
Static Methods\line ====================================================\par
\b0\fs24 - In Object orientate laguages we have two types of methods.\par
#1 - Instance Methods\line #2 - Static Methods\par
\b So what is the difference?\par
\b0 - Instance methods are available on an Instance of a class, which is an Object.\par
- In Contrast we have static methods, Static methods are available on the Class itself, not the Object instance. We often use them to create utility functions, that are not specific to a given Object.\par
- Static methods are accessable on the class itself.\line className.staticMethod();\par
- With these mwthods we are not working with a particular Object, we are working with the class itself. So to call static Methods, we don't have to create a instance of a class/Object.\par
\b Example\par
Math.floor() \b0 is equivalent to\par
class Math \{\line\tab static floor (value) \{\line\tab /......\line\tab\}\par
\tab static ceil (value) \{\line\tab /......\line\tab\}\par
\tab static abs (value) \{\line\tab /......\line\tab\}\line\}\par
\b ETC\par
\par
\fs28 ====================================================\line ========================================================================================================\par
\par
The This Keyword\line ====================================================\par
\b0\fs24 - With a method call, the this Keyword will point to the Object it is called from\par
- With a function call or a stand alone function, the this keyword will always point to the window\par
- We can enable \b strict mode\b0 . What strict mode does is\par
#1 - if there are errors that silently fail, it will turn them into exceptions\line #2 - It will change the behaviour of the this keyword in functions\par
\b - By default classes are all run in strict mode.\par
- \b0 In strict mode and in strict mode \b THIS \b0 that points to the widow are set as undefined\par
\b\par
\fs28 ====================================================\line ========================================================================================================\par
\par
Private properties using symbols\line ====================================================\par
\fs24 - \b0 In ES6 we have a new primitive type called Symbol\par
- A Symbol is basically a unique identifier and everytime you call it it creates another unique identifier. \line (Symbol === Symbol) = FALSE\line\line - A symbol is not a constructor function and can not be used with new\par
- We said that every symbol is unique, so we can used this unique value as a property name for a Object, to keep them private, they are kind of private, but there is a hack to get access to it. But it's alot of code to get one value.\par
- This can be done for methods aswell, see JS file\b\fs28\par
\b0\fs24\par
\b\fs28 ====================================================\line ========================================================================================================\par
\par
Inheritence with Classes\line ====================================================\par
\fs24 - \b0 We can inhert a class in the new ES6 version, by doing it in a very simple way. All we need to do is add extends after the className and then what class we want to extend from.\par
\b Example:\par
\b0 class Circle extends Shape \{\}\line\line - if we extend a class that has a constructor, and we also want a constructor in our child class, we need to first call super before we add in any properties and methods inside of the constructor.\par
\b Example:\par
\b0 class Shape \{\line\tab constructor(color) \{\line\tab\tab this.color = color;\line\tab\}\line\tab move()\{\line\tab\line\tab\}\line\}\b\par
\par
\b0 class Cirlce extends Shape \{\line\tab constructor(color, radius) \{\line\tab\tab super(color);\line\tab\tab this.radius = radius;\line\tab\}\line\tab draw()\{\}\line\}\line\par
- Doing it this way, we won't have to reset our constructor. It is automatically done\par
- Think of extends to mean Inherit\par
\par
\b\fs28 ====================================================\line ========================================================================================================\par
\par
Method Overiding\line ====================================================\par
\b0\fs24\line - In classes we can just define the method again inside of the new class and based on the prototype chain it will use the first one it sees, resulting in a new way of overwritting methods and properties.\par
- If for some reason you need to call both methods, you can access the parent class with super() and then call that method like this\line\b\line super.move();\par
\b0 - See JS file\par
\par
\b\fs28 What does Super() do?\line ====================================================\par
\b0\fs24 - When you call super, inside of a method. That means it's going to call the method you used super() on the parent class you extended from.\par
- So when we call super() inside of the constructor method, it means it's going to call the constructor from the class you are extending from.\par
- And anything thats in the parents constructor needs to be passed into the super() and child constructor parenthesis. However the child constructor can add it's own properties on top of that.\par
\par
\b Example\b0 :\par
constructor(firstName, lastName)\{\line\tab this.firstName = firstName;\line\tab this.lastName = lastName;\line\tab this.hasJob = false;\line\}\line\line class Anything extends Parent \{\line\tab constructor(firstName, lastName, job) \{\line\tab\tab super(firstName, lastName);\par
\tab\tab //this is what super brings in\line\tab\tab this.firstName = firstName;\line\tab\tab this.lastName = lastName;\line\tab\tab this.hasJob = false;\line\line\tab\tab this.job = job;\line\tab\tab this.hasJob = true;\line\tab\}\line\}\par
\par
- We can also call other methods inside of a different method using super \b Example\b0 :\par
\par
\b Parent Class\b0\line walk()\{\line   console.log('walking from parent')\line\}\line\line\b Child Class\b0\line walk()\{\line   super.walk();\line   console.log('walking from child')\line\}\par
}
 